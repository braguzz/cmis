{#
/**
 * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://cakephp.org CakePHP(tm) Project
 * @since         2.0.0
 * @license       http://www.opensource.org/licenses/mit-license.php MIT License
 */
#}
{% set belongsTo = Bake.aliasExtractor(modelObj, 'BelongsTo') %}
{% set belongsToMany = Bake.aliasExtractor(modelObj, 'belongsToMany') %}
{% set compact = ["'#{singularName}'"] %}
    /**
     * Edit method
     *
     * @param string|null $id {{ singularHumanName }} id.
     * @return \Cake\Http\Response|null|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit($id = null)
    {
        ${{ singularName }} = $this->{{ currentModelName }}
                                   ->findById($id)
                                   ->firstOrFail();
        $this->Authorization->authorize(${{ singularName }});   
   
      $return=$this->request->getData();
        if (empty($return['returncontroller']))
        {         $return['returncontrollerid']="";
                  $return['returnaction']="";
                  $return['returncontroller']="";
                  $return['returnsaveme']="";
        }
        $this->set('return',$return);      
        ${{ singularName }} = $this->{{ currentModelName }}->get($id, [
            'contain' => {{ Bake.exportArray(belongsToMany)|raw }},
        ]);
        {% for assoc in belongsTo|merge(belongsToMany) %}
            {%- set otherName = Bake.getAssociatedTableAlias(modelObj, assoc) %}
            {%- set otherPlural = otherName|variable %}
            {%- if otherName in Bake.exportArray(belongsToMany)|raw %}
                // inserire questo se si vuole togliere il ACSelect2 e mettere la lista 'semplice' - il limite a 200 puo essere cambiato
                // ${{ otherPlural }} = $this->{{ currentModelName }}->{{ otherName }}->find('list', ['limit' => 200]);
                   ${{ otherPlural }} = $this->{{ currentModelName }}->{{ otherName }}->find('list')->innerJoinWith('{{ currentModelName }}', function (\Cake\ORM\Query $query) use ($id) {
                                        return $query->where([
                                        '{{ currentModelName }}.id' => $id,
                                        ]);
                                        }); 
            {%- else %}
                  if (${{ singularName }}->{{ otherName|singularize|underscore }}_id)  ${{ otherPlural }} = $this->{{ currentModelName }}->{{ otherName }}->find('list',['conditions' => ['id' => ${{ singularName }}->{{ otherName|singularize|underscore }}_id]]);
                         else ${{ otherPlural }} = $this->{{ currentModelName }}->{{ otherName }}->find('list',['limit' => 0]); 
                {%- endif %}      
                {{- "\n" }}
            {%- set compact = compact|merge(["'#{otherPlural}'"]) %}
        {% endfor %}

        $this->set(compact({{ compact|join(', ')|raw }}));
      
        if ($this->request->is(['patch', 'post', 'put']) && in_array($return['returnsaveme'],["",1,"1"] ))  {
            ${{ singularName }} = $this->{{ currentModelName }}->patchEntity(${{ singularName }}, $this->request->getData());
            if ($this->{{ currentModelName }}->save(${{ singularName }})) {
                $this->Flash->success(__('The {{ singularHumanName|lower }} has been saved.'));
                $session = $this->request->getSession();
                $sendback = $session->read('referer');
                $session->delete('referer');
                return $this->redirect( $sendback );    
            }
            $this->Flash->error(__('The {{ singularHumanName|lower }} could not be saved. Please, try again.'));
        }
          else  { $session = $this->request->getSession();
        $session->write('referer', $this->referer());   
 }
    }
